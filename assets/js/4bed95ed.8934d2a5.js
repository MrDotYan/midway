"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[71034],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(t),d=l,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||o;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[m]="string"==typeof e?e:l,r[1]=s;for(var u=2;u<o;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=t(87462),l=(t(67294),t(3905));const o={},r="sequelize-auto-midway",s={unversionedId:"tool/sequelize_generator",id:"tool/sequelize_generator",title:"sequelize-auto-midway",description:"forked from sequelize/sequelize-auto",source:"@site/docs/tool/sequelize_generator.md",sourceDirName:"tool",slug:"/tool/sequelize_generator",permalink:"/docs/tool/sequelize_generator",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/tool/sequelize_generator.md",tags:[],version:"current",frontMatter:{}},i={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],p={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sequelize-auto-midway"},"sequelize-auto-midway"),(0,l.kt)("p",null,"forked from ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sequelize/sequelize-auto"},"sequelize/sequelize-auto")),(0,l.kt)("p",null,"\u901a\u8fc7\u5df2\u5b58\u5728\u7684\u6570\u636e\u5e93\u751f\u6210\u7528\u4e8e ",(0,l.kt)("inlineCode",{parentName:"p"},"Midway")," \u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"Sequelize")," \u5b9e\u4f53\u3002"),(0,l.kt)("p",null,"\u5176\u4ed6\u8be6\u7ec6\u6587\u6863\u548c\u7528\u6cd5\u8bf7\u53c2\u8003 ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sequelize/sequelize-auto"},"sequelize/sequelize-auto")),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i sequelize-auto-midway\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# \u63a8\u8350\n# \u8bf7\u66ff\u6362\u914d\u7f6e\u4fe1\u606f\nnpx sequelize-auto-midway -h localhost -d yourDBname -u root -x yourPassword -p 13306  --dialect mysql -o ./models --noInitModels true --caseModel c --caseProp c --caseFile c --indentation 1 -a ./additional.json\n")),(0,l.kt)("p",null,"additional.json"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "timestamps": true,\n  "paranoid": true\n}\n')),(0,l.kt)("p",null,"\u81ea\u52a8\u751f\u6210\u7684\u6a21\u677f\u6587\u4ef6\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Column, DataType, Table, Model } from 'sequelize-typescript';\n\n@Table({\n  tableName: 'task',\n  timestamps: false,\n  indexes: [\n    {\n      name: 'PRIMARY',\n      unique: true,\n      using: 'BTREE',\n      fields: [{ name: 'task_id' }],\n    },\n  ],\n})\nexport class TaskEntity extends Model {\n  @Column({\n    autoIncrement: true,\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: false,\n    primaryKey: true,\n    field: 'task_id',\n  })\n  taskId: number;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '\u4efb\u52a1\u6240\u5c5e\u5e94\u7528ID: 0-\u65e0\u6240\u5c5e',\n    field: 'app_id',\n  })\n  appId: number;\n\n  @Column({\n    type: DataType.STRING(64),\n    allowNull: false,\n    comment: '\u4efb\u52a1\u540d\u79f0',\n    field: 'task_name',\n  })\n  taskName: string;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '\u4efb\u52a1\u7c7b\u522b:1-cron,2-interval',\n  })\n  type: number;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '\u4efb\u52a1\u72b6\u6001:0-\u6682\u505c\u4e2d,1-\u542f\u52a8\u4e2d',\n  })\n  status: number;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: '\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4',\n    field: 'start_time',\n  })\n  startTime: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: '\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4',\n    field: 'end_time',\n  })\n  endTime: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    defaultValue: -1,\n    comment: '\u4efb\u52a1\u6267\u884c\u6b21\u6570',\n  })\n  limit: number;\n\n  @Column({\n    type: DataType.STRING(128),\n    allowNull: true,\n    defaultValue: '',\n    comment: '\u4efb\u52a1cron\u914d\u7f6e',\n  })\n  cron: string;\n\n  @Column({\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: true,\n    defaultValue: 0,\n    comment: '\u4efb\u52a1\u6267\u884c\u95f4\u9694\u65f6\u95f4',\n  })\n  every: number;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: '\u53c2\u6570',\n  })\n  args: string;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: '\u5907\u6ce8',\n  })\n  remark: string;\n}\n")),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"npx sequelize-auto-midway --help")," to see all available parameters with their descriptions. Some basic parameters below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Usage: npx sequelize-auto-midway -h <host> -d <database> -p [port] -u <user> -x\n[password] -e [engine]\n\nOptions:\n    --help               Show help                                   [boolean]\n    --version            Show version number                         [boolean]\n-h, --host               IP/Hostname for the database.                [string]\n-d, --database           Database name.                               [string]\n-u, --user               Username for database.                       [string]\n-x, --pass               Password for database. If specified without providing\n                          a password, it will be requested interactively from\n                          the terminal.\n-p, --port               Port number for database (not for sqlite). Ex:\n                          MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433\n                                                                      [number]\n-c, --config             Path to JSON file for Sequelize-Auto options and\n                          Sequelize's constructor \"options\" flag object as\n                          defined here:\n                          https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor\n                                                                      [string]\n-o, --output             What directory to place the models.          [string]\n-e, --dialect            The dialect/engine that you're using: postgres,\n                          mysql, sqlite, mssql                         [string]\n-a, --additional         Path to JSON file containing model options (for all\n                          tables). See the options: https://sequelize.org/master/class/lib/model.js~Model.html#static-method-init\n                                                                      [string]\n    --indentation        Number of spaces to indent                   [number]\n-t, --tables             Space-separated names of tables to import     [array]\n-T, --skipTables         Space-separated names of tables to skip       [array]\n--caseModel, --cm        Set case of model names: c|l|o|p|u\n                          c = camelCase\n                          l = lower_case\n                          o = original (default)\n                          p = PascalCase\n                          u = UPPER_CASE\n--caseProp, --cp         Set case of property names: c|l|o|p|u\n--caseFile, --cf         Set case of file names: c|l|o|p|u|k\n                          k = kebab-case\n--noAlias                Avoid creating alias `as` property in relations\n                                                                     [boolean]\n--noInitModels           Prevent writing the init-models file        [boolean]\n-n, --noWrite            Prevent writing the models to disk          [boolean]\n-s, --schema             Database schema from which to retrieve tables[string]\n-v, --views              Include database views in generated models  [boolean]\n-l, --lang               Language for Model output: es5|es6|esm|ts\n                          es5 = ES5 CJS modules (default)\n                          es6 = ES6 CJS modules\n                          esm = ES6 ESM modules\n                          ts = TypeScript                             [string]\n--useDefine              Use `sequelize.define` instead of `init` for es6|esm|ts\n--singularize, --sg      Singularize model and file names from plural table\n                          names\n")))}c.isMDXComponent=!0}}]);