"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[85361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const o={},r="Life cycle",l={unversionedId:"lifecycle",id:"lifecycle",title:"Life cycle",description:"Under normal circumstances, we want to do some initialization or other pre-processing things when the application starts, such as creating a database connection and pre-generating some configuration, instead of processing it when requesting a response.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md",sourceDirName:".",slug:"/lifecycle",permalink:"/en/docs/lifecycle",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/lifecycle.md",tags:[],version:"current",frontMatter:{},sidebar:"common",previous:{title:"Multi-environment configuration",permalink:"/en/docs/env_config"},next:{title:"Logger",permalink:"/en/docs/logger_v3"}},c={},s=[{value:"Project life cycle",id:"project-life-cycle",level:2},{value:"onConfigLoad",id:"onconfigload",level:3},{value:"onReady",id:"onready",level:3},{value:"onServerReady",id:"onserverready",level:3},{value:"onStop",id:"onstop",level:3},{value:"onHealthCheck",id:"onhealthcheck",level:3},{value:"Global Object Lifecycle",id:"global-object-lifecycle",level:2},{value:"onBeforeObjectCreated",id:"onbeforeobjectcreated",level:3},{value:"onObjectCreated",id:"onobjectcreated",level:3},{value:"onObjectInit",id:"onobjectinit",level:3},{value:"onBeforeObjectDestroy",id:"onbeforeobjectdestroy",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"life-cycle"},"Life cycle"),(0,i.kt)("p",null,"Under normal circumstances, we want to do some initialization or other pre-processing things when the application starts, such as creating a database connection and pre-generating some configuration, instead of processing it when requesting a response."),(0,i.kt)("h2",{id:"project-life-cycle"},"Project life cycle"),(0,i.kt)("p",null,"The framework provides these lifecycle functions for developers to handle:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Configuration file loading, we can modify the configuration here (",(0,i.kt)("inlineCode",{parentName:"li"},"onConfigLoad"),")"),(0,i.kt)("li",{parentName:"ul"},"When the dependent injection container is ready, most things can be done at this stage (",(0,i.kt)("inlineCode",{parentName:"li"},"onReady"),")"),(0,i.kt)("li",{parentName:"ul"},"After the service is started, you can get the server( ",(0,i.kt)("inlineCode",{parentName:"li"},"onServerReady"),")"),(0,i.kt)("li",{parentName:"ul"},"The application is about to be shut down. Here, clean up the resources (",(0,i.kt)("inlineCode",{parentName:"li"},"onStop")," ).")),(0,i.kt)("p",null,"Midway's life cycle is to implement the ILifeCycle interface through the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/configuration.ts")," file, which can be automatically loaded when the project starts."),(0,i.kt)("p",null,"The interface is defined as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ILifeCycle {\n    /**\n  * Execute after the application configuration is loaded\n  */\n  onConfigLoad?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n    /**\n   * Execute when relying on the injection container ready\n   */\n  onReady(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n    /**\n   * Execute after the application service is started\n   */\n  onServerReady?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n    /**\n   * Execute when the application stops\n   */\n  onStop?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n}\n")),(0,i.kt)("h3",{id:"onconfigload"},"onConfigLoad"),(0,i.kt)("p",null,"Generally used to modify the configuration file of the project."),(0,i.kt)("p",null,"For example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onConfigLoad(): Promise<void> {\n    // The data returned directly will be automatically merged into the configuration.\n    return {\n      test: 1\n    }\n  }\n}\n")),(0,i.kt)("p",null,"In this case, the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Config")," configuration contains the returned data. For more information, see ","[Asynchronous initialization configuration]","(./env_config# Asynchronous Initialization Configuration)."),(0,i.kt)("h3",{id:"onready"},"onReady"),(0,i.kt)("p",null,"onReady is a life cycle that is used in most scenarios."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that ready here refers to the dependency injection container ready, not the application ready, so you can make any extension to the application, such as adding middleware, connecting databases, etc.")),(0,i.kt)("p",null,"We need to connect a database in advance during initialization. Since it is in the class, we can also inject the connection tool class of a database such as db through the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject")," decorator. This instance contains two functions, connect and close:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // Establish a database connection\n    await this.db.connect();\n  }\n\n  async onStop(): Promise<void> {\n    // Close database connection\n    await this.db.close();\n  }\n}\n")),(0,i.kt)("p",null,"In this way, we can establish the database connection when the application starts, rather than creating it when the response is requested. At the same time, when the application is stopped, the database connection can also be closed gracefully."),(0,i.kt)("p",null,"In addition, in this way, the default injected objects can be expanded."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as sequelize from 'sequelize';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // Three-party package object\n    container.registerObject('sequelize', sequelize);\n  }\n}\n")),(0,i.kt)("p",null,"It can be directly injected into other classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export class IndexHandler {\n\n  @Inject()\n  sequelize;\n\n  async handler() {\n    console.log(this.sequelize);\n  }\n}\n")),(0,i.kt)("h3",{id:"onserverready"},"onServerReady"),(0,i.kt)("p",null,"This lifecycle is needed when you want to get information about the framework's service objects, ports, and so on."),(0,i.kt)("p",null,"Let's take ",(0,i.kt)("inlineCode",{parentName:"p"},"@midwayjs/koa")," as an example to get its Server at startup."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration implements ILifeCycle {\n\n  async onServerReady(container: IMidwayContainer): Promise<void> {\n    // Obtain the exposed Framework in koa\n    const framework = await container.getAsync(koa.Framework);\n    const server = framework.getServer();\n    // ...\n\n  }\n}\n")),(0,i.kt)("h3",{id:"onstop"},"onStop"),(0,i.kt)("p",null,"We can clean up some resources at this stage, such as closing the connection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // Establish a database connection\n    await this.db.connect();\n  }\n\n  async onStop(): Promise<void> {\n    // Close database connection\n    await this.db.close();\n  }\n}\n")),(0,i.kt)("h3",{id:"onhealthcheck"},"onHealthCheck"),(0,i.kt)("p",null,"When the built-in health check service calls the status retrieval API, this method is automatically executed for all components."),(0,i.kt)("p",null,"The following simulates a db health check method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, HealthResult } from '@midwayjs/core';\n\n@Configuration({\n   namespace: 'db'\n})\nexport class MainConfiguration implements ILifeCycle {\n   @Inject()\n   db: any;\n\n   async onReady(container: IMidwayContainer): Promise<void> {\n     await this.db.connect();\n   }\n\n   async onHealthCheck(): Promise<HealthResult> {\n     try {\n       const result = await this.db.isConnect();\n       if (result) {\n         return {\n           status: true,\n         };\n       } else {\n         return {\n           status: false,\n           reason: 'db is disconnected',\n         };\n       }\n     } catch (err) {\n       return {\n         status: false,\n         reason: err.message,\n       };\n     }\n   }\n}\n")),(0,i.kt)("p",null,"In the above ",(0,i.kt)("inlineCode",{parentName:"p"},"onHealthCheck"),", a status check of ",(0,i.kt)("inlineCode",{parentName:"p"},"isConnect")," is called, and a fixed ",(0,i.kt)("inlineCode",{parentName:"p"},"HealthResult")," type format is returned based on the result."),(0,i.kt)("p",null,"Note that external calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"onHealthCheck")," may be very frequent. Please keep the check logic as reliable and efficient as possible to ensure that there is no greater pressure on check dependencies. At the same time, please handle the logic of resource release after the check timeout by yourself to avoid the risk of memory leaks caused by frequent resource requests without returning results."),(0,i.kt)("h2",{id:"global-object-lifecycle"},"Global Object Lifecycle"),(0,i.kt)("p",null,"The so-called object life cycle refers to the event that each object is created and destroyed in the dependency injection container. Through these life cycles, we can do some operations when the object is created and destroyed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface IObjectLifeCycle {\n  onBeforeObjectCreated(/**...**/);\n  onObjectCreated(/**...**/);\n  onObjectInit(/**...**/);\n  onBeforeObjectDestroy(/**...**/);\n}\n")),(0,i.kt)("p",null,"These stages are already included in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ILifeCycle")," definition."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Note that the object lifecycle API will affect the entire dependency injection container and the use of the business. Please operate with caution.")),(0,i.kt)("h3",{id:"onbeforeobjectcreated"},"onBeforeObjectCreated"),(0,i.kt)("p",null,"Before the business object instance is created, some objects inside the framework cannot be intercepted because they have been initialized."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectBeforeCreatedOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onBeforeObjectCreated(Clzz: new (...args), options: ObjectBeforeCreatedOptions): Promise<void> {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"There are two parameters in the entry parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Clzz")," is the prototype class of the object to be created."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," some parameters")),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.context"),(0,i.kt)("td",{parentName:"tr",align:null},"IMidwayContainer"),(0,i.kt)("td",{parentName:"tr",align:null},"Dependent injection container itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.definition"),(0,i.kt)("td",{parentName:"tr",align:null},"IObjectDefinition"),(0,i.kt)("td",{parentName:"tr",align:null},"Object definition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.constructorArgs"),(0,i.kt)("td",{parentName:"tr",align:null},"any[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Constructor input parameter")))),(0,i.kt)("h3",{id:"onobjectcreated"},"onObjectCreated"),(0,i.kt)("p",null,"Execute after the object instance is created, this stage can replace the created object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectCreatedOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectCreatedOptions): Promise<void> {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"There are two parameters in the entry parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ins")," is the object created by the builder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," some parameters")),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.context"),(0,i.kt)("td",{parentName:"tr",align:null},"IMidwayContainer"),(0,i.kt)("td",{parentName:"tr",align:null},"Dependent injection container itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.definition"),(0,i.kt)("td",{parentName:"tr",align:null},"IObjectDefinition"),(0,i.kt)("td",{parentName:"tr",align:null},"Object definition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.replaceCallback"),(0,i.kt)("td",{parentName:"tr",align:null},"(ins: any) => void"),(0,i.kt)("td",{parentName:"tr",align:null},"Callback method for object replacement")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example: dynamically add attributes")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // Each created object will add a_name attribute\n    ins._name = 'xxxx';\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example: Replace an object")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // Each created object will be replaced with {bbb: 'aaa'}\n    options.replaceCallback({\n      bbb: 'aaa'\n    });\n\n    // ...\n  }\n}\n")),(0,i.kt)("h3",{id:"onobjectinit"},"onObjectInit"),(0,i.kt)("p",null,"Execute after the asynchronous initialization method is executed after the object instance is created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectInit(ins: any, options: ObjectInitOptions): Promise<void> {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"There are two parameters in the entry parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ins")," is the object created by the builder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," some parameters")),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.context"),(0,i.kt)("td",{parentName:"tr",align:null},"IMidwayContainer"),(0,i.kt)("td",{parentName:"tr",align:null},"Dependent injection container itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.definition"),(0,i.kt)("td",{parentName:"tr",align:null},"IObjectDefinition"),(0,i.kt)("td",{parentName:"tr",align:null},"Object definition")))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"At this stage, you can also dynamically attach attributes, methods, etc. to objects. The difference with ",(0,i.kt)("inlineCode",{parentName:"p"},"onObjectCreated")," is that this stage is after the initialization method is executed.")),(0,i.kt)("h3",{id:"onbeforeobjectdestroy"},"onBeforeObjectDestroy"),(0,i.kt)("p",null,"Execute before the object instance is destroyed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectBeforeDestroyOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onBeforeObjectDestroy(ins: any, options: ObjectBeforeDestroyOptions): Promise<void> {\n    // ...\n  }\n}\n")),(0,i.kt)("p",null,"There are two parameters in the entry parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ins")," is the object created by the builder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," some parameters")),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.context"),(0,i.kt)("td",{parentName:"tr",align:null},"IMidwayContainer"),(0,i.kt)("td",{parentName:"tr",align:null},"Dependent injection container itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"options.definition"),(0,i.kt)("td",{parentName:"tr",align:null},"IObjectDefinition"),(0,i.kt)("td",{parentName:"tr",align:null},"Object definition")))))}u.isMDXComponent=!0}}]);