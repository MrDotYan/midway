"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[18851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(b,s(s({ref:t},c),{},{components:n})):r.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},s="MQTT",o={unversionedId:"extensions/mqtt",id:"extensions/mqtt",title:"MQTT",description:"MQTT is an OASIS standard messaging protocol for the Internet of Things (IoT). It is designed as an extremely lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth. MQTT today is used in a wide variety of industries, such as automotive, manufacturing, telecommunications, oil and gas, etc.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md",sourceDirName:"extensions",slug:"/extensions/mqtt",permalink:"/en/docs/extensions/mqtt",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/mqtt.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"Kafka",permalink:"/en/docs/extensions/kafka"},next:{title:"Tracer",permalink:"/en/docs/extensions/otel"}},l={},p=[{value:"Version requirements",id:"version-requirements",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install components",id:"install-components",level:2},{value:"Enable component",id:"enable-component",level:2},{value:"Subscription service",id:"subscription-service",level:2},{value:"Basic configuration",id:"basic-configuration",level:3},{value:"Subscription implementation",id:"subscription-implementation",level:3},{value:"Message publish",id:"message-publish",level:2},{value:"Basic configuration",id:"basic-configuration-1",level:3},{value:"Use publisher",id:"use-publisher",level:3},{value:"Component log",id:"component-log",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mqtt"},"MQTT"),(0,a.kt)("p",null,"MQTT is an OASIS standard messaging protocol for the Internet of Things (IoT). It is designed as an extremely lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth. MQTT today is used in a wide variety of industries, such as automotive, manufacturing, telecommunications, oil and gas, etc."),(0,a.kt)("p",null,"Related Information:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Available for standard projects"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,a.kt)("td",{parentName:"tr",align:null},"Can publish messages")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Available for integration"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent main frame"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent log"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,a.kt)("h2",{id:"version-requirements"},"Version requirements"),(0,a.kt)("p",null,"Due to the requirements of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mqttjs/MQTT.js"},"mqtt")," library itself, the required version is ",(0,a.kt)("strong",{parentName:"p"},"Node.js >= 16")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Since MQTT requires Broker as a transit transport, you need to deploy the MQTT Broker service yourself. This document does not provide deployment guidance for the MQTT service itself."),(0,a.kt)("h2",{id:"install-components"},"Install components"),(0,a.kt)("p",null,"Install the mikro component to provide the ability to access mikro-orm."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/mqtt@3 --save\n")),(0,a.kt)("p",null,"Or add the following dependencies in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," and reinstall."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "dependencies": {\n     "@midwayjs/mqtt": "^3.0.0",\n     // ...\n   },\n   "devDependencies": {\n     // ...\n   }\n}\n')),(0,a.kt)("h2",{id:"enable-component"},"Enable component"),(0,a.kt)("p",null,"Introduce components in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/configuration.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\nimport * as mqtt from '@midwayjs/mqtt';\n\n@Configuration({\n   imports: [\n     // ...other components\n     mqtt,\n   ],\n})\nexport class MainConfiguration {}\n")),(0,a.kt)("p",null,"Since MQTT is divided into two parts: ",(0,a.kt)("strong",{parentName:"p"},"subscriber")," and ",(0,a.kt)("strong",{parentName:"p"},"publisher"),", the two can be used independently, and we will introduce them separately."),(0,a.kt)("h2",{id:"subscription-service"},"Subscription service"),(0,a.kt)("h3",{id:"basic-configuration"},"Basic configuration"),(0,a.kt)("p",null,"Through the ",(0,a.kt)("inlineCode",{parentName:"p"},"sub")," field and the ",(0,a.kt)("inlineCode",{parentName:"p"},"@MqttSubscriber")," decorator, we can configure multiple subscribers."),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"sub1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sub2")," below are two different subscribers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\n\nexport default {\n   mqtt: {\n     sub: {\n       sub1: {\n         // ...\n       },\n       sub2: {\n         // ...\n       }\n     }\n   }\n}\n")),(0,a.kt)("p",null,"The simplest subscriber configuration requires several fields, the subscribed address and the subscribed Topic."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\n\nexport default {\n   mqtt: {\n     sub: {\n       sub1: {\n         connectOptions: {\n           host: 'test.mosquitto.org',\n           port: 1883,\n         },\n         subscribeOptions: {\n           topicObject: 'test',\n         },\n       },\n       sub2: {\n         // ...\n       }\n     }\n   }\n}\n")),(0,a.kt)("p",null,"  The ",(0,a.kt)("inlineCode",{parentName:"p"},"sub1")," subscriber is configured with ",(0,a.kt)("inlineCode",{parentName:"p"},"connectOptions")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribeOptions"),", which represent connection configuration and subscription configuration respectively."),(0,a.kt)("h3",{id:"subscription-implementation"},"Subscription implementation"),(0,a.kt)("p",null,"We can provide a standard subscriber implementation in a directory, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"src/consumer/sub1.subscriber.ts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/consumer/sub1.subscriber.ts\n\nimport { ILogger, Inject } from '@midwayjs/core';\nimport { Context, IMqttSubscriber, MqttSubscriber } from '@midwayjs/mqtt';\n\n@MqttSubscriber('test')\nexport class Sub1Subscriber implements IMqttSubscriber {\n\n   @Inject()\n   ctx: Context;\n\n   async subscribe() {\n     // ...\n   }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@MqttSubscriber")," decorator declares a subscription class implementation, and its parameter is the name of the subscriber, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"sub1")," in our configuration file."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IMqttSubscriber")," interface specifies a ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," method, which will be executed whenever a new message is received."),(0,a.kt)("p",null,"Like other message subscription mechanisms, the message itself is passed through the ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\nexport class Sub1Subscriber implements IMqttSubscriber {\n   @Inject()\n   ctx: Context;\n\n   async subscribe() {\n     const payload = this.ctx.message.toString();\n     // ...\n   }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," field includes several mqtt properties."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Properties"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ctx.topic"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Subscribe to Topic")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ctx.message"),(0,a.kt)("td",{parentName:"tr",align:null},"Buffer"),(0,a.kt)("td",{parentName:"tr",align:null},"Message content")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ctx.packet"),(0,a.kt)("td",{parentName:"tr",align:null},"IPublishPacket (from mqtt library)"),(0,a.kt)("td",{parentName:"tr",align:null},"publish package information")))),(0,a.kt)("h2",{id:"message-publish"},"Message publish"),(0,a.kt)("h3",{id:"basic-configuration-1"},"Basic configuration"),(0,a.kt)("p",null,"Message publishing also requires the creation of instances, and the configuration itself uses the ",(0,a.kt)("a",{parentName:"p",href:"/docs/service_factory"},"Service Factory")," design pattern."),(0,a.kt)("p",null,"For example, the multi-instance configuration is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\n\nexport default {\n   mqtt: {\n     pub: {\n       clients: {\n         default: {\n           host: 'test.mosquitto.org',\n           port: 1883,\n         },\n         pub2: {\n           // ...\n         }\n       }\n     }\n   }\n}\n")),(0,a.kt)("p",null,"The above configuration creates two instances named ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pub2"),"."),(0,a.kt)("h3",{id:"use-publisher"},"Use publisher"),(0,a.kt)("p",null,"If the instance name is ",(0,a.kt)("inlineCode",{parentName:"p"},"default"),", the default message publishing class can be used."),(0,a.kt)("p",null,"for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n   @Inject()\n   producer: DefaultMqttProducer;\n  \n   async invoke() {\n     // Publish messages synchronously\n     this.producer.publish('test', 'hello world');\n    \n     //Asynchronous release\n     await this.producer.publishAsync('test', 'hello world');\n    \n     //Add configuration\n     await this.producer.publishAsync('test', 'hello world', {\n       qos: 2\n     });\n   }\n}\n")),(0,a.kt)("p",null,"You can also use the built-in factory class ",(0,a.kt)("inlineCode",{parentName:"p"},"MqttProducerFactory")," to inject different instances."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { MqttProducerFactory, DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n   @InjectClient(MqttProducerFactory, 'pub2')\n   producer: DefaultMqttProducer;\n  \n   async invoke() {\n     // ...\n   }\n}\n")),(0,a.kt)("h2",{id:"component-log"},"Component log"),(0,a.kt)("p",null,"The component has its own log, and ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.logger")," will be recorded in ",(0,a.kt)("inlineCode",{parentName:"p"},"midway-mqtt.log")," by default."),(0,a.kt)("p",null,"We can configure this logger object separately."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     // ...\n     mqttLogger: {\n       fileLogName: 'midway-mqtt.log',\n     },\n   }\n}\n")),(0,a.kt)("p",null,"We can also configure the output format of this log separately."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   mqtt: {\n     // ...\n     contextLoggerFormat: info => {\n       const { jobId, from } = info.ctx;\n       return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.message}`;\n     },\n   }\n}\n")))}m.isMDXComponent=!0}}]);